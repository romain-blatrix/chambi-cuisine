{"version":3,"sources":["serviceWorker.js","theme/colors.js","theme/provider.jsx","components/recipe.jsx","components/app.jsx","index.js"],"names":["Boolean","window","location","hostname","match","colors","primary","secondary","memo","children","theme","myRecipe","title","description","RecipeContainer","styled","div","StepContainer","StepMark","Recipe","nbOfSteps","length","map","index","GlobalWrapper","Header","header","Main","main","Footer","footer","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCbSC,EALA,CACbC,QAAS,UACTC,UAAW,WCiBEC,kBARK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACfC,EAAQ,CACZL,UAGF,OAAO,kBAAC,IAAD,CAAeK,MAAOA,GAAQD,M,ihBCbvC,IAAME,EAAW,CACf,CAAEC,MAAO,uBAAwBC,YAAa,aAC9C,CAAED,MAAO,qBAAsBC,YAAa,aAC5C,CAAED,MAAO,qBAAsBC,YAAa,mBAGxCC,EAAkBC,IAAOC,IAAV,KAMfC,EAAgBF,IAAOC,IAAV,KAWbE,EAAWH,IAAOC,IAAV,KAqBCG,EAfA,WACb,IAAMC,EAAYT,EAASU,OAC3B,OACE,kBAACP,EAAD,KACGH,EAASW,KAAI,WAAyBC,GAAzB,IAAGX,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OACZ,kBAACI,EAAD,KACE,kBAACC,EAAD,eAAcK,EAAQ,EAAtB,cAA6BH,IAC7B,6BAAMR,GACN,6BAAMC,S,s6BCjChB,IAGMW,EAAgBT,IAAOC,IAAV,IAFE,SAUfS,EAASV,IAAOW,OAAV,IAXS,QAiBC,qBAAGhB,MAAkBL,OAAOC,WAQ5CqB,EAAOZ,IAAOa,KAAV,IAxBW,SAgCfC,EAASd,IAAOe,OAAV,IAhCS,SAsCC,qBAAGpB,MAAkBL,OAAOE,aAqBnCwB,EAZH,kBACV,kBAAC,EAAD,KACE,kBAACP,EAAD,KACE,kBAACC,EAAD,uBACA,kBAACE,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACE,EAAD,8BCvDNG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SL4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9ac9f20.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const colors = {\n  primary: \"#32936F\",\n  secondary: \"#124559\"\n};\n\nexport default colors;\n","// @flow\n\nimport React, { memo, type Node } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport colors from \"theme/colors.js\";\n\ntype Props = {|\n  children?: Node\n|};\n\nconst GlobalTheme = ({ children }) => {\n  const theme = {\n    colors\n  };\n\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n};\n\nexport default memo<Props>(GlobalTheme);\n","import React, { useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst myRecipe = [\n  { title: \"faire bouillir l'eau\", description: \"blablabla\" },\n  { title: \"couper les patates\", description: \"blablabla\" },\n  { title: \"couper les oignons\", description: \"et ouai maggle\" }\n];\n\nconst RecipeContainer = styled.div`\n  scroll-snap-type: y mandatory;\n  height: 100%;\n  overflow-y: scroll;\n`;\n\nconst StepContainer = styled.div`\n  min-height: 100%;\n  width: 100vw;\n  scroll-snap-align: start;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst StepMark = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\n\nconst Recipe = () => {\n  const nbOfSteps = myRecipe.length;\n  return (\n    <RecipeContainer>\n      {myRecipe.map(({ title, description }, index) => (\n        <StepContainer>\n          <StepMark>{`${index + 1} / ${nbOfSteps}`}</StepMark>\n          <div>{title}</div>\n          <div>{description}</div>\n        </StepContainer>\n      ))}\n    </RecipeContainer>\n  );\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport GlobalTheme from \"theme/provider.jsx\";\n\nimport Recipe from \"components/recipe.jsx\";\n\nconst headerHeight = \"80px\";\nconst footerHeight = \"200px\";\n\nconst GlobalWrapper = styled.div`\n  position: relative;\n  height: calc(100vh + ${footerHeight});\n  width: 100vw;\n  display: flex;\n  flex-flow: column nowrap;\n`;\n\nconst Header = styled.header`\n  position: sticky;\n  flex-shrink: 0;\n  top: 0;\n  width: 100vw;\n  height: ${headerHeight};\n  background-color: ${({ theme }) => theme.colors.primary};\n  color: white;\n  padding: 0 10px;\n  display: flex;\n  align-items: center;\n  z-index: 1;\n`;\n\nconst Main = styled.main`\n  flex-grow: 1;\n  height: c100%;\n  background-color: white;\n  margin-bottom: ${footerHeight};\n  z-index: 0;\n`;\n\nconst Footer = styled.footer`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100vw;\n  height: ${footerHeight};\n  background-color: ${({ theme }) => theme.colors.secondary};\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n  z-index: -1;\n`;\n\nconst App = () => (\n  <GlobalTheme>\n    <GlobalWrapper>\n      <Header>chambi cuisine</Header>\n      <Main>\n        <Recipe />\n      </Main>\n      <Footer>GROS FOOTER MAGGLE</Footer>\n    </GlobalWrapper>\n  </GlobalTheme>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"components/app.jsx\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}